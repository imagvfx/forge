<!doctype html>
<html> [
	<head> [
		<style> [`{{template "style.css"}}`]
	]
	<body> [
		{{template "nav.bml" $}}
		<div class="main"> [
			<div class="one {{if $.EditMode}}editMode{{end}}"> [
				{{if $.UserIsAdmin}}
				<div class="editModeDiv"> [<div class="editModeButton"> [edit]]
				{{end}}
				<div class="users"> [
				<h1> [
					Users
				]
				<form id="addUserForm" class="onlyEditMode" onsubmit="return false" method="post" action="/api/add-user"> [
					<input name="user" type="text" size="6" style="width:7.5rem" placeholder="user" value=""> []
					<input name="called" type="text" size="6" style="width:7.5rem" placeholder="called" value=""> []
					<button> [Add]
				]
				{{range $u := $.Users}}
				<div class="user" data-user="{{$u.Name}}"> [
					<div> [<span class="userID"> [{{$u.Name}}]]
					<div> [<span class="userCalled onlyViewMode"> [- {{$u.Called}}]]
					<form class="updateUserCalledForm onlyEditMode" onsubmit="return false" method="post" action="/api/update-user-called"> [
						<input name="user" type="hidden" size="6" style="width:7.5rem" placeholder="user" value="{{$u.Name}}"> []
						<input name="called" type="text" size="6" style="width:7.5rem" placeholder="called" value="{{$u.Called}}"> []
					]
					{{if $.UserIsAdmin}}
					<div class="disableButton button"> [Disable]
					{{end}}
				]
				{{end}}
				]
				{{if $.UserIsAdmin}}
				<div class="disabledUsers"> [
				<h1> [
					Disabled Users
				]
				{{range $u := $.DisabledUsers}}
				<div class="user" data-user="{{$u.Name}}"> [
					<div> [<span class="userID"> [{{$u.Name}}] - {{$u.Called}}]
					<div class="enableButton button"> [Enable]
				]
				{{end}}
				]
				{{end}}
			]
			<div id="footer" style="position:fixed;left:0;bottom:0;width:100%;"> [
				<div id="statusBar" style="display:flex;padding:0 0.5rem;align-items:center;background-color:white;height:1.5rem;border-top:1px solid #DDD;font-size:0.8rem;"> []
			]
		]
	]
]

<style> [```
.editModeDiv {
	display: flex;
	justify-content: end;
	height: 0;
}

.editModeButton {
	font-size: 0.8rem;
	color: #aaa;
	cursor: pointer;
}

.editModeButton:hover {
	color: #444;
}

.one:not(.editMode) .disabledUsers {
	display: none;
}

#addUserForm {
	display: flex;
	gap: 0.2rem;
	margin-bottom: 1.2rem;
}

.user {
	display: flex;
	color: #444;
	gap: 0.5rem;
	margin-bottom: 0.8rem;
	align-items: center;
}

.userID {
	cursor: pointer;
}

.userID:hover {
	color: black;
	text-decoration: underline;
}

.one:not(.editMode) .onlyEditMode {
	display: none !important;
}

.one.editMode .onlyViewMode {
	display: none !important;
}

.one:not(.editMode) .button {
	display: none;
}

.button {
	border: 1px solid black;
	border-radius: 3px;
	font-size: 0.7rem;
	display: flex;
	padding: 0.1rem 0.2rem;
	align-items: center;
	cursor: pointer;
}

.button:hover {
	border: 1px solid #666;
}

.disableButton {
	color: #ddd;
	background-color: #888;
	border: 1px solid #444;
}

.disableButton:hover {
	color: #fff;
	background-color: #222;
	border: 1px solid #000;
}

.enableButton {
	color: #aaa;
	background-color: #eee;
	border: 1px solid #aaa;
}

.enableButton:hover {
	color: #222;
	background-color: #fff;
	border: 1px solid #444;
}

```]

<script> [```
window.onload = function() {
	document.onclick = function(event) {
		let t = event.target.closest(".userID");
		if (t) {
			let txt = t.textContent;
			console.log(txt);
			let succeeded = function() {
				printStatus("text copied: " + txt);
			}
			let failed = function(err) {
				printStatus("failed to copy text: " + err);
			}
			navigator.clipboard.writeText(txt).then(succeeded, failed);
			return;
		}
		let edit = event.target.closest(".editModeButton");
		if (edit) {
			let url = new URL(location.href);
			let v = url.searchParams.get("edit");
			if (v) {
				url.searchParams.delete("edit");
			} else {
				url.searchParams.set("edit", 1);
			}
			location.href = url.href;
		}
		let disable = event.target.closest(".disableButton");
		if (disable) {
			let user = disable.closest(".user").dataset.user;
			let req = new XMLHttpRequest();
			let formData = new FormData();
			formData.append("user", user);
			formData.append("disabled", "1");
			req.open("post", "/api/update-user-disabled");
			req.onerror = function() {
				printErrorStatus("network error occurred. please check whether the server is down.");
			}
			req.onload = function() {
				if (req.status != 200) {
					printErrorStatus(req.responseText);
					return;
				}
				location.reload();
			}
			req.send(formData);
		}
		let enable = event.target.closest(".enableButton");
		if (enable) {
			let user = enable.closest(".user").dataset.user;
			let req = new XMLHttpRequest();
			let formData = new FormData();
			formData.append("user", user);
			formData.append("disabled", "0"); // 0 means enable
			req.open("post", "/api/update-user-disabled");
			req.onerror = function() {
				printErrorStatus("network error occurred. please check whether the server is down.");
			}
			req.onload = function() {
				if (req.status != 200) {
					printErrorStatus(req.responseText);
					return;
				}
				location.reload();
			}
			req.send(formData);
		}
	}
	let addForm = document.querySelector("#addUserForm");
	let submitAddForm = function() {
		let req = new XMLHttpRequest();
		let formData = new FormData(addForm);
		req.open("post", "/api/add-user");
		req.onerror = function() {
			printErrorStatus("network error occurred. please check whether the server is down.");
		}
		req.onload = function() {
			if (req.status != 200) {
				printErrorStatus(req.responseText);
				return;
			}
			location.reload();
		}
		req.send(formData);
	}
	addForm.onkeydown = function(event) {
		if (event.key == "Enter") {
			submitAddForm();
		}
	}
	addForm.onsubmit = function(event) {
		submitAddForm();
		return false;
	}
	let updateForms = document.querySelectorAll(".updateUserCalledForm");
	for (let form of updateForms) {
		form.onkeydown = function(event) {
			if (event.key != "Enter") {
				return;
			}
			let req = new XMLHttpRequest();
			let formData = new FormData(form);
			req.open("post", "/api/update-user-called");
			req.onerror = function() {
				printErrorStatus("network error occurred. please check whether the server is down.");
			}
			req.onload = function() {
				if (req.status != 200) {
					printErrorStatus(req.responseText);
					return;
				}
				location.reload();
			}
			req.send(formData);
		}
	}
}

function printStatus(s) {
	let statusBar = document.getElementById("statusBar");
	statusBar.classList.remove("error");
	statusBar.innerHTML = s;
}

function printErrorStatus(e) {
	let statusBar = document.getElementById("statusBar");
	statusBar.classList.add("error");
	statusBar.innerHTML = e;
}

function clearStatus() {
	printStatus("");
}
```]
