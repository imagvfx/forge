<!doctype html>
<meta name="viewport" content="width=device-width" initial-scale="1">
<html> [
	<head> [
		{{template "style"}}
	]
	<body> [
		{{template "nav" $}}
		<div class="main"> [
			<div style="width:16rem;background-color:#FAFAFA;border-right:1.5px solid #EEE;" class="left"> [
				<div style="padding:1.5rem;font-size:1rem;color:#555"> [Pinned]
				<div style="padding:0 1.5rem;font-size:0.9rem;"> [
					{{range $p := $.UserSetting.PinnedPaths}}
					<div style="margin:0.2rem 0;"> [<a style="color:#22A;" href="{{$p}}"> [{{$p}}]]
					{{end}}
				]
			]
			<div class="right"> [
				{{if ne $.Entry.Path "/"}}
				<!-- Search Related -->
				<div style="display:flex;flex-wrap:wrap;padding:1.5rem;background-color:#F4F4F4;border-bottom:1.5px solid #EEE;"> [
					<div style="flex:3;"> [
					<div style="font-size:2rem"> [
						<a href="/{{topName $.Entry.Path}}"> [<b> [{{topName $.Entry.Path}}]]
					]
					<!-- Quick Search -->
					<div id="quickSearch"> [
						<div style="display:flex;font-size:0.7rem;color:#AAA;margin-right:1rem;margin-bottom:0.5rem;"> [
							<div> [quick search]
							<div id="quickSearchEditButton" style="margin-left:0.4rem" onclick="toggleQuickSearchEditMode()"> [(edit)]
						]
						<div style="display:flex;font-size:1rem;"> [
						{{range $searchName, $searchValue := $.UserSetting.EntryPageQuickSearch -}}
						<div style="display:flex;"> [
							<!-- Either quickSearchLinks or quickSearchRemoveButton can be shown at a time -->
							<a class="quickSearchLink" style="color:#333" href="/{{topName $.Entry.Path}}?search=1&{{toURL $searchValue}}"> [{{$searchName}}]
							<form action="/api/set-user-setting" method="POST"> [
								<input name="quick_search_name" type="hidden" value="{{$searchName}}">
								<input name="quick_search_value" type="hidden" value=""> []
								<button name="update_quick_search" value="1" class="quickSearchRemoveButton" style="color:#A00;border:0;background-color:rgba(1,1,1,0);"> [{{$searchName}}]
								<input readonly name="back_to_referer" type="hidden" value="1"> []
							]
						]
						<div style="display:inline-block;width:0.8rem;"> []
						{{- end}}
						]
					]
					]
					<!-- Search Box -->
					<div style="flex:1;"> [
						<form action="/{{topName $.Entry.Path}}" style="display:flex;"> [
							<input hidden name="search" value="1"> []
							<select name="search_entry_type" class="search-box-left"> [
								<option value=""> [(any)]
							{{range $t := $.AllEntryTypes}}
								{{if ne $t "root"}}
								<option value="{{$t}}" {{if eq $t $.SearchEntryType}}selected{{end}}> [{{$t}}]
								{{end}}
							{{end}}
							]
							<input name="search_query" type="text" class="search-box-center" style="flex:1;min-width:10rem" placeholder="search" value="{{$.SearchQuery}}"> []
							<button class="search-box-right" style="background-color:inherit"> [Go]
						]
						{{if $.ResultsFromSearch}}
						<div style="height:0.2rem"> []
						<form action="/api/set-user-setting" style="display:flex;justify-content:end;color:#AAA;" method="post"> [
							<input name="user" type="hidden" value="{{$.User}}"> []
							<input name="quick_search_name" style="width:7rem;border-radius:2px;background-color:inherit;font-size:0.7rem;border: 1px solid rgba(1, 1, 1, 0);" placeholder="add to quick search" value=""> []
							<input name="quick_search_value" type="hidden" value="search_entry_type={{$.SearchEntryType}}&search_query={{$.SearchQuery}}"> []
							<button name="update_quick_search" value="1" hidden> []
							<input readonly name="back_to_referer" type="hidden" value="1"> []
						]
						{{end}}
					]
				]
				{{end}}
				{{if not $.ResultsFromSearch}}
				<div class="entry" style="padding:1.5rem;background-color:#FAFAFA;border-bottom:1.5px solid #EEE"> [
					<div style="display:flex;align-items:center;flex-wrap:wrap;align-items:start;margin-bottom:1rem;"> [
						<div style="flex:3;font-size:1.2rem"> [
							<b> [{{pathLinks $.Entry.Path}}]
						]
						<div style="display:flex;flex-wrap:wrap;gap:1.2rem;font-size:0.75rem;"> [
							<form action="/api/set-user-setting" method="POST"> [
								<input name="pinned_path" type="hidden" value="{{$.Entry.Path}}">
								<input name="pinned_path_at" type="hidden" value="{{if $.EntryPinned}}-1{{else}}{{len $.UserSetting.PinnedPaths}}{{end}}"> []
								<button id="updatePinnedPathButton" name="update_pinned_path" value="1" hidden> []
								<label for="updatePinnedPathButton" style="cursor:pointer;"> [{{if $.EntryPinned}}Unpin{{else}}Pin{{end}}]
								<input readonly name="back_to_referer" type="hidden" value="1"> []
							]
							<form action="/api/rename-entry" method="post"> [
								<input name="path" type="hidden" value="{{$.Entry.Path}}"> []
								<input id="renameInput" name="new-name" type="text" style="display:none"> []
								<input readonly name="back_to_referer" type="hidden" value="1"> []
							]
							<label id="rename-display-toggle" class="item-box" style="cursor:pointer" onclick="toggleRenameInput()"> [Rename]
							<form action="/api/delete-entry" method="post"> [
								<input name="path" type="hidden" value="{{$.Entry.Path}}"> []
								<button id="delete-entry-button" style="display:none"> []
								<label for="delete-entry-button" class="item-box" style="color:#A22;cursor:pointer"> [Delete]
								<input readonly name="back_to_referer" type="hidden" value="1"> []
							]
						]
					]
					<div style="display:flex;"> [
						<div style="display:flex;align-items:center;flex-wrap:wrap;align-items:start;margin-bottom:1rem;"> [
							<div style="margin-right:1rem;display:flex;flex-wrap:wrap;align-items:start"> [
								<div id="thumbnail" class="thumbnail" data-has-thumb="{{if $.Entry.HasThumbnail}}1{{end}}" style="display:flex"> [
									<div style="display:flex;border:1px solid #CCCCCC"> [
										<img id="thumbnailImg" src="/thumbnail{{$.Entry.Path}}" width="128px" height="72px" style="{{if not $.Entry.HasThumbnail}}visibility:hidden;{{end}}"> []
									]
									<form class="updateThumbnail" action="/api/{{if $.Entry.HasThumbnail}}set{{else}}add{{end}}-thumbnail" method="POST" enctype="multipart/form-data"> [
										<input name="path" type="hidden" value="{{$.Entry.Path}}"> []
										<input id="thumbnailInput" class="updateThumbnailInput" name="file" type="file" accept="image/jpeg, image/png" style="display:none" onchange="updateThumbnail(this)"> []
										<label for="thumbnailInput" class="updateThumbnailButton thumbnailButton" style="{{if $.Entry.HasThumbnail}}visibility:hidden;{{end}}position:relative;top:0;margin-left:-1rem;box-sizing:border-box;width:1rem;height:1rem;border-radius:0 0 0 3px;display:flex;justify-content:center;align-items:center;font-size:0.75rem;cursor:pointer"> [+]
										<input readonly name="back_to_referer" type="hidden" value="1"> []
									]
									<form class="deleteThumbnail" action="/api/delete-thumbnail" method="POST"> [
										<input name="path" type="hidden" value="{{$.Entry.Path}}"> []
										<label id="deleteThumbnailButton" class="deleteThumbnailButton thumbnailButton" style="{{if not $.Entry.HasThumbnail}}visibility:hidden;{{end}}position:relative;top:0;margin-left:-1rem;box-sizing:border-box;width:1rem;height:1rem;border-radius:0 0 0 3px;display:flex;justify-content:center;align-items:center;font-size:0.75rem;cursor:pointer;color:#888"> [-]
										<input readonly name="back_to_referer" type="hidden" value="1"> []
									]
								]
							]
						]
						<div id="entry-items" style="flex:1;display:flex;"> [
							<!-- Property Expand Toggle -->
							<div style="margin-bottom:1.5rem;font-size:0.75rem;color:#555;min-width:8rem;"> [
								<div id="property-box" class="item-box" style="display:flex"> [
									<div id="property-category" class="item-category" onclick="showItems('property')"> [Property ({{len $.Properties}})]
									<div class="item-adder" onclick="showItemAdder('{{$.Entry.Path}}', 'property')"> [+]
								]
								<div id="environ-box" class="item-box" style="display:flex"> [
									<div id="environ-category" class="item-category" onclick="showItems('environ')"> [Environ ({{len $.Environs}})]
									<div class="item-adder" onclick="showItemAdder('{{$.Entry.Path}}', 'environ')"> [+]
								]
								<div id="access-box" class="item-box" style="display:flex"> [
									<div id="access-category" class="item-category" onclick="showItems('access')"> [Access ({{len $.AccessControls}})]
									<div class="item-adder" onclick="showItemAdder('{{$.Entry.Path}}', 'access')"> [+]
								]
							]
							<!-- Property / Environ / Access Items -->
							<div style="display:flex;gap:1rem;flex-wrap:wrap"> [
								{{range $p := $.Properties}}
								<div class="property-items" style="display:none"> [
									<div style="display:flex;gap:1rem;"> [
										<div style="flex:1;font-size:0.75rem;color:#AAA;cursor:pointer;" onclick="showItemUpdater('{{$.Entry.Path}}', 'property', '{{$p.ID}}', '{{$p.Name}}', '{{$p.Type}}', '{{$p.Value}}')"> [{{$p.Name}}]
										<a href="/logs?path={{$.Entry.Path}}&category=property&name={{$p.Name}}" style="padding:0 2px;font-size:0.75rem;color:#AAA;border-radius:2px;opacity:0.5;"> [&middot;&middot;&middot;]
									]
									<div style="height:0.2rem"> []
									<div id="propertyValue-{{$p.ID}}" class="{{if $p.ValueError}}invalid{{end}} itemValue" style="font-size:0.8rem"> [{{brLines $p.Value}}{{$p.ValueError}}]
								]
								{{end}}
								{{range $e := $.Environs}}
								<div class="environ-items" style="display:none"> [
									<div style="display:flex;gap:1rem;"> [
										<div style="flex:1;font-size:0.75rem;color:#AAA;cursor:pointer" onclick="showItemUpdater('{{$.Entry.Path}}', 'environ', '{{$e.ID}}', '{{$e.Name}}', '{{$e.Type}}', '{{$e.Value}}')"> [{{$e.Name}}]
										<a href="/logs?path={{$.Entry.Path}}&category=environ&name={{$e.Name}}" style="padding:0 2px;font-size:0.75rem;color:#AAA;border-radius:2px;opacity:0.5;"> [&middot;&middot;&middot;]
									]
									<div style="height:0.2rem"> []
									<div id="environValue-{{$e.ID}}" class="{{if $e.ValueError}}invalid{{end}} itemValue" style="font-size:0.8rem;overflow-wrap:break-word"> [{{brLines $e.Value}}{{$e.ValueError}}]
								]
								{{end}}
								{{range $a := $.AccessControls}}
								<div class="access-items" style="display:none"> [
									<div style="display:flex;gap:1rem;"> [
										<div style="flex:1;font-size:0.75rem;color:#AAA;cursor:pointer" onclick="showItemUpdater('{{$.Entry.Path}}', 'access', '{{$a.ID}}', '{{$a.Accessor}}', '{{$a.AccessorType}}', '{{$a.Mode}}')"> [{{$a.Accessor}}]
										<a href="/logs?path={{$.Entry.Path}}&category=access&name={{$a.Accessor}}" style="padding:0 2px;font-size:0.75rem;color:#AAA;border-radius:2px;opacity:0.5;"> [&middot;&middot;&middot;]
									]
									<div style="height:0.2rem"> []
									<div id="accessValue-{{$a.ID}}" class="itemValue" style="font-size:0.8rem;overflow-wrap:break-word"> [{{$a.Mode}}]
								]
								{{end}}
							]
						]
					]
				]
				{{end}}
				<div class="subEntries" style="flex:1;background-color:#FAFAFA;padding:1.5rem;padding-bottom:16rem;"> [
				{{if $.ResultsFromSearch}}
					{{if not $.SubEntriesByTypeByParent}}No search results{{end}}
				{{end}}
				{{$i := 0}}
				{{range $t, $entsByParent := $.SubEntriesByTypeByParent}}
					<div> [
						{{if $i}}
						<div style="margin-top:3rem;margin-bottom:3rem;border-top:1px solid #DDD"> []
						{{end}}
						{{if not $.ResultsFromSearch}}
						<div style="display:flex;align-items:center;flex-wrap:wrap;gap:2rem;margin-top:1rem;margin-bottom:1rem;"> [
							<div style="font-size:1.2rem"> [<b> [{{$t}} ({{len (index $entsByParent $.Entry.Path)}})]]
							<!-- Add SubEntry -->
							<form action="/api/add-entry" style="display:flex" method="POST"> [
								<input name="parent" type="hidden" value="{{$.Entry.Path}}"> []
								<input name="type" type="hidden" value="{{$t}}"> []
								<input name="name" style="border:1px solid #DDD;border-right:0;border-radius:2px 0 0 2px" placeholder="name"> []
								<button style="border:1px solid #DDD;border-radius:0 2px 2px 0"> [+]
								<input readonly name="back_to_referer" type="hidden" value="1"> []
							]
							<!-- Property Filter -->
							<form action="/api/set-user-setting" style="flex:1;display:flex" method="POST"> [
								<input name="entry_page_entry_type" type="hidden" value="{{$t}}"> []
								<input name="entry_page_property_filter" type="text" style="flex:1;border:1px solid #DDD;border-radius:2px;width:20rem" value="{{index $.UserSetting.EntryPagePropertyFilter $t}}" placeholder="filter"> []
								<button style="display:none" name="update_filter" value="1"> []
								<input readonly name="back_to_referer" type="hidden" value="1"> []
							]
							<!-- Sort -->
							<form action="/api/set-user-setting" style="display:flex;align-items:center" method="POST"> [
								<input name="entry_page_entry_type" type="hidden" value="{{$t}}"> []
								{{$sortProp := index $.UserSetting.EntryPageSortProperty $t}}
								{{$prop := sortProperty $sortProp}}
								{{$desc := sortDesc $sortProp}}
								<select name="entry_page_sort_property" style="appearance:none;margin-right:0.5rem;min-width:6rem;border:1px solid #DDD;border-radius:2px;"> [
									<option value=""> [(name)]
								{{range $p := index $.DefaultProperties $t}}
									<option value="{{$p}}" {{if eq $p $prop}}selected{{end}}> [{{$p}}]
								{{end}}
								]
								<input id="sort_desc_cb" name="entry_page_sort_desc" style="margin:0;width:1.2rem;border-radius:2px 0 0 2px;background-color:#F3F3F3;height:20px" type="checkbox" {{if $desc}}checked{{end}}> []
								<button name="update_sort" style="appearance:none;border:1px solid #DDD;border-left:0;border-radius:0 2px 2px 0;background-color:#F3F3F3" value="1"> [Sort]
								<input readonly name="back_to_referer" type="hidden" value="1"> []
							]
						]
						{{end}}
						{{$j := 0}}
						{{range $parent, $entries := $entsByParent}}
							{{if $entries}}
								{{if $j}}
								<div style="height:1rem"> []
								{{end}}
								{{if $.ResultsFromSearch}}
									<h5> [From <a href="{{$parent}}"> [{{$parent}}] ({{len $entries}})]
								{{end}}
								<div style="display:flex;flex-direction:column;border:1px solid #DDD;border-radius:4px"> [
									{{$propFilters := index $.PropertyFilters $t}}
									{{range $k, $e := $entries}}
									{{$props := index $.SubEntryProperties $e.Path}}
									{{$pad := "0.3rem"}}
									{{if $k}}
									<div style="border-top:1px solid #DDD"> []
									{{end}}
									<div class="subEntry" style="flex:1;display:flex;color:black"> [
										<div class="subEntryLink" style="padding:{{$pad}};width:96px"> [
											<a id="thumbnail-{{$i}}-{{$j}}-{{$k}}" class="thumbnail" data-has-thumb="{{if $e.HasThumbnail}}1{{end}}" style="display:flex;color:black;text-decoration:none;" href="{{$e.Path}}"> [
												<div style="display:flex;border:1px solid #CCCCCC;vertical-align:middle;background-color:#F4F4F4;"> [
													<img id="thumbnailImg-{{$i}}-{{$j}}-{{$k}}" src="/thumbnail{{$e.Path}}" width="96px" height="54px" alt="" style="{{if not $e.HasThumbnail}}visibility:hidden{{end}}"> []
												]
												<form class="updateThumbnail" action="/api/{{if $e.HasThumbnail}}set{{else}}add{{end}}-thumbnail" method="POST" enctype="multipart/form-data"> [
													<input name="path" type="hidden" value="{{$e.Path}}"> []
													<input id="thumbnailInput-{{$i}}-{{$j}}-{{$k}}" class="updateThumbnailInput" name="file" type="file" accept="image/jpeg, image/png" style="display:none" onchange="updateThumbnail(this)"> []
													<label for="thumbnailInput-{{$i}}-{{$j}}-{{$k}}" class="updateThumbnailButton thumbnailButton" style="{{if $e.HasThumbnail}}visibility:hidden;{{end}}position:relative;top:0;margin-left:-1rem;box-sizing:border-box;width:1rem;height:1rem;border-radius:0 0 0 3px;display:flex;justify-content:center;align-items:center;font-size:0.75rem;cursor:pointer;;color:#888"> [+]
													<input readonly name="back_to_referer" type="hidden" value="1"> []
												]
												<form class="deleteThumbnail" action="/api/delete-thumbnail" method="POST"> [
													<input name="path" type="hidden" value="{{$e.Path}}"> []
													<label id="deleteThumbnailButton-{{$i}}-{{$j}}-{{$k}}" class="deleteThumbnailButton thumbnailButton" style="{{if not $e.HasThumbnail}}visibility:hidden;{{end}}position:relative;top:0;margin-left:-1rem;box-sizing:border-box;width:1rem;height:1rem;border-radius:0 0 0 3px;display:flex;justify-content:center;align-items:center;font-size:0.75rem;cursor:pointer;color:#888"> [-]
													<input readonly name="back_to_referer" type="hidden" value="1"> []
												]
											]
											<a style="color:black" href="{{$e.Path}}"> [
												<div class="subEntryName" style="margin-top:{{$pad}};width:96px"> [<b> [{{$e.Name}}]]
											]
										]
										<div style="flex:1;padding:{{$pad}};display:flex;flex-wrap:wrap;gap:0.5rem;"> [
											{{range $name := $propFilters}}
												<div class="property" style="width:12rem;"> [
													{{$p := index $props $name}}
													<div style="font-size:0.75rem;color:#AAA;cursor:pointer" {{if $p}}onclick="showItemUpdater('{{$e.Path}}', 'property', '{{$p.ID}}', '{{$p.Name}}', '{{$p.Type}}', '{{$p.Value}}')"{{end}}> [{{$name}}]
													{{if $p}}
													<div style="height:0.2rem"> []
													<div id="propertyValue-{{$p.ID}}" class="{{if $p.ValueError}}invalid{{end}} itemValue" style="font-size:0.8rem;overflow-wrap:break-word"> [{{brLines $p.Value}}{{$p.ValueError}}]
													{{end}}
												]
											{{end}}
										]
									]
									{{end}}
								]
							{{$j = inc $j}}
							{{end}}
						{{end}}
					]
				{{$i = inc $i}}
				{{end}}
				]
				<div id="footer" style="display:none;position:fixed;left:0;bottom:0;width:100%;"> [
					<div id="itemUpdater" style="display:none;background-color:#F9F9F9;border-top:1px solid #BBB;"> [
						<div style="display:flex;justify-content:space-between;padding:0.5rem;background-color:#E0EEEE"> [
							<div class="entryLabel" style=""> []
							<div style="border-radius:3px;background-color:#BDD;width:1rem;height:1rem;display:flex;justify-content:center;align-items:center;font-size:0.5rem;cursor:pointer" onclick="hideFooter()"> [&#x2715]
						]
						<div style="display:flex;gap:0.5rem;padding:0.7rem;"> [
							<div class="nameLabel" style="width:8rem;border:0;display:flex"> []
							<form class="valueForm" action="/api/set-property" style="flex:1;display:flex;gap:0.5rem;margin-bottom:1rem" method="POST"> [
								<input name="path" class="entryInput" type="hidden"> []
								<input name="name" class="nameInput" type="hidden"> []
								<input name="ctg" class="categoryInput" type="hidden"> []
								<input name="item-id" class="itemIDInput" type="hidden"> []
								<input name="type" class="typeInput typeHolder" type="hidden"> []
								<textarea name="value" class="valueInput updaterOrAdderInput" style="flex:1" rows="1"> []
								<img class="updatingMarker" src="/asset/update.svg" style="visibility:hidden;width:1rem;height:1rem;position:relative;top:0;margin-top:0.5rem;margin-left:-2rem;margin-right:0.5rem;"> []
								<input readonly name="back_to_referer" type="hidden" value="1"> []
								<button style="width:5rem"> [Update]
							]
						]
					]
					<div id="itemAdder" style="display:none;box-sizing:border-box;background-color:#F9F9F9;border-top:1px solid #BBB;"> [
						<div style="display:flex;justify-content:space-between;padding:0.5rem;background-color:#F5E0E0;"> [
							<div class="entryLabel" style=""> []
							<div style="border-radius:3px;background-color:#ECC;width:1rem;height:1rem;display:flex;justify-content:center;align-items:center;font-size:0.5rem;cursor:pointer" onclick="hideFooter()"> [&#x2715]
						]
						<div style="display:flex;gap:0.5rem;padding:0.7rem;background-color:inherit;"> [
							<form class="valueForm" action="/api/add-property" style="flex:1;display:flex;gap:0.5rem;margin-bottom:1rem" method="POST"> [
								<input name="path" class="entryInput" type="hidden"> []
								<input name="name" class="nameInput" style="box-sizing:border-box;height:1.5rem"> []
								<input name="ctg" class="categoryInput" type="hidden"> []
								<select name="type" class="typeSelect typeHolder" style="box-sizing:border-box;height:1.5rem;width:8rem"> [/* options will be added from script when event occurs */]
								<textarea name="value" class="valueInput updaterOrAdderInput" style="flex:1" rows="1"> []
								<img class="updatingMarker" src="/asset/update.svg" style="visibility:hidden;width:1rem;height:1rem;position:relative;top:0;margin-top:0.5rem;margin-left:-2rem;margin-right:0.5rem;"> []
								<input readonly name="back_to_referer" type="hidden" value="1"> []
								<button style="width:5rem"> [Add]
							]
						]
					]
					<div id="statusBar" style="display:flex;padding:0 0.5rem;align-items:center;background-color:white;height:1.5rem;border-top:1px solid #DDD;font-size:0.8rem;"> []
				]
			]
		]
	]
]

<style> [`
#quickSearchEditButton {
	color: #CCC;
}

#quickSearchEditButton:hover {
	color: #AAA;
}

.quickSearchLink {
	display:inline-block;
}

#quickSearch.editMode .quickSearchLink {
	display:none;
}

.quickSearchRemoveButton {
	display:none;
}

#quickSearch.editMode .quickSearchRemoveButton {
	display:inline-block;
}

#quickSearch.editMode .quickSearchRemoveButton:hover {
	text-decoration: line-through;
}

.itemValue.invalid {
	color: rgba(150, 15, 15, 0.7);
}

.thumbnailButton {
	opacity: 0;
}

.thumbnailButton:hover {
	opacity: 0.8;
	background-color: #DDD;
}

.thumbnail.prepareDrop .thumbnailButton {
	opacity: 0.8;
	background-color: #DDD;
}

.subEntryName {
	text-decoration: none;
}

.subEntryLink:hover .subEntryName {
	text-decoration: underline;
}

.item-category {
	padding: 0.3rem;
	border-radius: 2px 0 0 2px;
	cursor: pointer;
}

.item-box:hover .item-category {
	background-color: #EEE;
}

.item-box.selected .item-category {
	background-color:#E0EEEE;
}

.item-adder {
	padding: 0.3rem;
	border-radius: 0 2px 2px 0;
	color: #999;
	cursor: pointer;
}

.item-box:hover .item-adder {
	background-color: #EEE;
}

.item-box.selected .item-adder {
	background-color:#E0EEEE;

}

.item-adder:hover {
	color: #555;
}

.property-items, .environ-items, .access-items {
	width: 12rem;
	height: 4rem;
	padding: 0.3rem;
	padding-right: 0.5rem;
	padding-bottom: 0.5rem;
	background-color: #FFF;
	border-radius: 2px;
	border: 1px solid #EEE;
	overflow: auto;
	overflow-wrap: break-word;
}

.valueInput {
	max-height: 140px;
}

.updatingMarker {
	animation-duration: 1s;
	animation-name: rotating;
	animation-iteration-count: infinite;
	animation-timing-function: linear;
}

@keyframes rotating {
	from {
		transform: rotate(0turn);
	}
	to {
		transform: rotate(1turn);
	}
}

#statusBar.error {
	color: #A22;
}
`]

<script> [`
"use strict";

window.onload = function() {
	let allInputs = document.getElementsByTagName("input");
	for (let input of allInputs) {
		input.autocomplete = "off";
	}
	let inputs = document.getElementsByClassName("updaterOrAdderInput");
	for (let input of inputs) {
		input.onkeydown = function(ev) {
			if (ev.ctrlKey && ev.code == "Enter") {
				submitUpdaterOrAdder(ev, input);
			}
		}
		input.parentElement.onsubmit = function(ev) {
			submitUpdaterOrAdder(ev, input);
		}
	}
	for (let input of inputs) {
		input.oninput = function() {
			resizeTextArea(input);
		}
	}
	let thumbs = document.getElementsByClassName('thumbnail');
	for (let thumb of thumbs) {
		thumb.ondragover = function(event) {
			event.stopPropagation();
			event.preventDefault();
			event.currentTarget.classList.add("prepareDrop");
			if (event.currentTarget.dataset.hasThumb == "1") {
				event.currentTarget.getElementsByClassName("deleteThumbnailButton")[0].style.visibility = "hidden";
				event.currentTarget.getElementsByClassName("updateThumbnailButton")[0].style.visibility = "visible";
			}
		}
		thumb.ondragleave = function(event) {
			event.stopPropagation();
			event.preventDefault();
			event.currentTarget.classList.remove("prepareDrop");
			if (event.currentTarget.dataset.hasThumb == "1") {
				event.currentTarget.getElementsByClassName("updateThumbnailButton")[0].style.visibility = "hidden";
				event.currentTarget.getElementsByClassName("deleteThumbnailButton")[0].style.visibility = "visible";
			}
		}
		thumb.ondrop = function(event) {
			event.stopPropagation();
			event.preventDefault();
			let thumbInput = event.currentTarget.getElementsByClassName("updateThumbnailInput")[0];
			thumbInput.files = event.dataTransfer.files;
			updateThumbnail(thumbInput);
			event.currentTarget.classList.remove("prepareDrop");
		}
	}
	let delThumbButtons = document.getElementsByClassName("deleteThumbnailButton");
	for (let delButton of delThumbButtons) {
		delButton.onclick = function(event) {
			event.stopPropagation();
			event.preventDefault();
			deleteThumbnail(delButton);
		}
	}
}

window.onpageshow = function() {
	let allImgs = document.getElementsByTagName("img");
	for (let img of allImgs) {
		if (!img.id.startsWith("thumbnailImg")) {
			continue;
		}
		if ((window.getComputedStyle(img).visibility == "visible") && (img.naturalWidth == 0)) {
			// This means we uploaded the thumbnail, but doesn't show properly
			// as we arrive this page with browser's previous button.
			// Interestingly the "?t=curent-time" part are gone (at least) in firefox.
			// It makes the browser uses the old 'not found' cache.
			img.src = img.src.split("?")[0] + "?t=" + new Date().getTime();
		}
	}
}

function toggleQuickSearchEditMode() {
	let el = document.getElementById("quickSearch");
	if (el.classList.contains("editMode")) {
		el.classList.remove("editMode");
		return;
	}
	el.classList.add("editMode");
}

function toggleRenameInput() {
	let input = document.getElementById("renameInput");
	if (input.style.display == "none") {
		input.style.display = "block";
		input.focus();
	} else {
		input.style.display = "none";
	}
}

function updateThumbnail(thumbInput) {
	let thumbID = thumbInput.id.replace("thumbnailInput", "thumbnail");
	let thumb = document.getElementById(thumbID);
	showStatusBarOnly();
	let now = new Date().getTime();
	if (thumb.dataset.lastUpload) {
		// Prevent Safari from firing this event twice.
		// TODO: resolve the base problem
		let last = Number(thumb.dataset.lastUpload);
		let d = now - last;
		if (d < 1000) {
			return;
		}
	}
	thumb.dataset.lastUpload = String(now);
	let imgID = thumbInput.id.replace("thumbnailInput", "thumbnailImg");
	let img = document.getElementById(imgID);
	let req = new XMLHttpRequest();
	let form = thumbInput.parentElement;
	if (thumb.dataset.hasThumb == "1") {
		form.action = form.action.replace("/api/add", "/api/set");
	} else {
		form.action = form.action.replace("/api/set", "/api/add");
	}
	req.open(form.method, form.action);
	req.send(new FormData(form));
	req.onload = function() {
		if (req.status == 200) {
			img.src = img.src.split("?")[0] + "?t=" + new Date().getTime();
			img.style.visibility = "visible";
			thumb.dataset.hasThumb = "1";
			thumb.getElementsByClassName("updateThumbnailButton")[0].style.visibility = "hidden";
			thumb.getElementsByClassName("deleteThumbnailButton")[0].style.visibility = "visible";
			printStatus("done");
		} else {
			img.parentElement.style.border = "1px solid #D72";
			printErrorStatus(req.responseText);
		}
	}
	req.onerror = function(err) {
		img.parentElement.style.border = "1px solid #D72";
		showStatusBarOnly();
		printErrorStatus("network error occurred. please check whether the server is down.");
	}
}

function deleteThumbnail(delButton) {
	let thumbID = delButton.id.replace("deleteThumbnailButton", "thumbnail");
	let thumb = document.getElementById(thumbID);
	let imgID = delButton.id.replace("deleteThumbnailButton", "thumbnailImg");
	showStatusBarOnly();
	let img = document.getElementById(imgID);
	let req = new XMLHttpRequest();
	let form = delButton.parentElement;
	req.open(form.method, form.action);
	req.send(new FormData(form));
	req.onload = function() {
		if (req.status == 200) {
			// the image is gone, reflect it to img tag (even if it will not visible).
			img.src = img.src.split("?")[0] + "?t=" + new Date().getTime();
			img.style.visibility = "hidden";
			form.action = form.action.replace("/api/set", "/api/add");
			thumb.dataset.hasThumb = "";
			thumb.getElementsByClassName("deleteThumbnailButton")[0].style.visibility = "hidden";
			thumb.getElementsByClassName("updateThumbnailButton")[0].style.visibility = "visible";
			printStatus("done");
		} else {
			img.parentElement.style.border = "1px solid #D72";
			printErrorStatus(req.responseText);
		}
	}
	req.onerror = function(err) {
		img.parentElement.style.border = "1px solid #D72";
		printErrorStatus("network error occurred. please check whether the server is down.");
	}
}

function resizeTextArea(textarea) {
	textarea.style.height = "auto";
	textarea.style.height = String(textarea.scrollHeight) + "px";
}

function submitUpdaterOrAdder(ev, input) {
	ev.stopPropagation();
	ev.preventDefault();
	let req = new XMLHttpRequest();
	let form = input.parentElement;
	let formData = new FormData(input.parentElement);
	let button = form.getElementsByTagName("button")[0];
	let marker = form.getElementsByClassName("updatingMarker")[0];
	req.onload = function() {
		marker.style.visibility = "hidden";
		if (req.status == 200) {
			button.innerText = "Success!";
			// we know the value we just send,
			// but let's get the corrected value from server.
			let get = new XMLHttpRequest();
			let getFormData = new FormData();
			getFormData.append("path", formData.get("path"));
			getFormData.append("name", formData.get("name"));
			get.open("post", "/api/get-" + formData.get("ctg"));
			get.onload = function() {
				if (get.status == 200) {
					let j = JSON.parse(get.responseText);
					if (j.Err != null) {
						printErrorStatus(j.Err);
						return;
					}
					let UpdatingElement = document.getElementById(formData.get("ctg")+"Value-"+formData.get("item-id"));
					if (UpdatingElement != null) {
						UpdatingElement.innerText = j.Msg.Value;
						// remove possible 'invalid' class
						UpdatingElement.classList.remove("invalid");
					}
					printStatus("done");
					return;
				} else {
					printErrorStatus("update done, but failed to get the new value:" + get.responseText);
					return;
				}
			}
			get.send(getFormData);
		} else {
			button.innerText = "Failed!";
			printErrorStatus(req.responseText);
		}
	}
	req.onerror = function(err) {
		marker.style.visibility = "hidden";
		button.innerText = "Failed!";
		printErrorStatus("network error occurred. please check whether the server is down.");
	}
	req.open(form.method, form.action);
	req.send(formData);
	marker.style.visibility = "visible";
}

document.onkeydown = keyPressed;

function keyPressed(ev) {
	if (ev.code == "Escape") {
		toggleFooter();
	}
}

function hideAllItems() {
	let items = document.getElementById("entry-items");
	document.getElementById("property-box").classList.remove("selected");
	let props = items.getElementsByClassName("property-items");
	for (let p of props) {
		p.style.display = "none";
	}
	document.getElementById("environ-box").classList.remove("selected");
	let envs = items.getElementsByClassName("environ-items");
	for (let e of envs) {
		e.style.display = "none";
	}
	document.getElementById("access-box").classList.remove("selected");
	let accesses = items.getElementsByClassName("access-items");
	for (let a of accesses) {
		a.style.display = "none";
	}
}

function showItems(ctg) {
	let cls = document.getElementById(ctg + "-box").classList;
	let selected = cls.contains("selected")
	hideAllItems();
	if (selected) {
		return;
	}
	cls.add("selected");
	let items = document.getElementById("entry-items");
	let props = items.getElementsByClassName(ctg + "-items");
	for (let p of props) {
		p.style.display = "block";
	}
}

function showItemUpdater(entry, ctg, id, name, type, value) {
	showFooter();
	hideItemAdder();

	let updater = document.getElementById("itemUpdater");
	updater.style.display = "block";
	updater.getElementsByClassName("entryLabel")[0].innerText = entry;
	updater.getElementsByClassName("entryInput")[0].value = entry;
	updater.getElementsByClassName("categoryInput")[0].value = ctg;
	updater.getElementsByClassName("itemIDInput")[0].value = id;
	updater.getElementsByClassName("nameLabel")[0].innerText = name;
	updater.getElementsByClassName("nameInput")[0].value = name;
	updater.getElementsByClassName("typeInput")[0].value = type;
	updater.getElementsByClassName("valueForm")[0].action = "/api/set-" + ctg;
	updater.getElementsByTagName("button")[0].innerText = "Update";

	let valueInput = updater.getElementsByClassName("valueInput")[0];
	valueInput.placeholder = type;
	valueInput.value = value;
	resizeTextArea(valueInput);
	valueInput.focus();
}

function hideItemUpdater() {
	let updater = document.getElementById("itemUpdater");
	updater.style.display = "none";
}

let PropertyTypes = {{marshalJS $.PropertyTypes}}
let AccessorTypes = {{marshalJS $.AccessorTypes}}

function showItemAdder(entry, ctg) {
	// TODO: Add the item inplace?
	showFooter();
	hideItemUpdater();

	let adder = document.getElementById("itemAdder");
	adder.style.display = "block";
	adder.getElementsByClassName("entryLabel")[0].innerText = entry;
	adder.getElementsByClassName("entryInput")[0].value = entry;
	adder.getElementsByClassName("categoryInput")[0].value = ctg;
	adder.getElementsByTagName("button")[0].innerText = "Add";

	let nameInput = adder.getElementsByClassName("nameInput")[0]
	nameInput.value = name;
	nameInput.placeholder = ctg;
	let typeSel = adder.getElementsByClassName("typeSelect")[0]
	typeSel.innerHTML = "";
	let types = PropertyTypes;
	if (ctg == "access") {
		types = AccessorTypes;
	}
	for (let t of types) {
		let option = document.createElement("option");
		option.value = t;
		option.text = t;
		typeSel.appendChild(option)
	}
	adder.getElementsByClassName("valueForm")[0].action = "/api/add-" + ctg;

	let valueInput = adder.getElementsByClassName("valueInput")[0];
	valueInput.value = "";
	resizeTextArea(valueInput);

	nameInput.focus();
}

function hideItemAdder() {
	let adder = document.getElementById("itemAdder");
	adder.style.display = "none";
}

// showStatusBarOnly shows statusBar and hide other elements in footer. (need for eg. update thumbnail failed.)
// statusBar will be cleaned before it is shown.
function showStatusBarOnly() {
	showFooter();
	hideItemAdder();
	hideItemUpdater();
	let statusBar = document.getElementById("statusBar");
	statusBar.innerHTML = "";
}

function printStatus(s) {
	let statusBar = document.getElementById("statusBar");
	statusBar.classList.remove("error");
	statusBar.innerHTML = s;
}

function printErrorStatus(e) {
	let statusBar = document.getElementById("statusBar");
	statusBar.classList.add("error");
	statusBar.innerHTML = e;
}

function toggleFooter() {
	let footer = document.getElementById("footer");
	if (footer.style.display == "block") {
		hideFooter();
	} else {
		showFooter();
	}
}

function showFooter() {
	let footer = document.getElementById("footer");
	footer.style.display = "block";
}

function hideFooter() {
	let footer = document.getElementById("footer");
	footer.style.display = "none";
}

function toggleCollapse() {
	let collapsible = this.parentElement;
	let content = collapsible.getElementsByClassName("content")[0];
	if (content.style.display == "none") {
		content.style.display = "block";
	} else {
		content.style.display = "none";
	}
}

var coll = document.getElementsByClassName("collapsible");
for (let i = 0; i < coll.length; i++) {
	coll[i].getElementsByClassName("title")[0].addEventListener("click", toggleCollapse);
}
`]
