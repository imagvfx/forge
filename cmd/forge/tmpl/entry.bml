<!doctype html>
<meta name="viewport" content="width=device-width" initial-scale="1">
<html> [
	<head> [
		{{template "style"}}
	]
	<body> [
		{{template "nav" $}}
		<div class="main"> [
			<div class="entry" style="padding:1.5rem;background-color:#F4F4F4;border-bottom:1.5px solid #EEE"> [
				<div style="display:flex;align-items:center;flex-wrap:wrap;align-items:start;margin-bottom:1rem;"> [
					<div style="margin-right:1rem;display:flex;align-items:start"> [
						<div class="entryThumbnail" data-has-thumb="{{if $.Entry.HasThumbnail}}1{{end}}" style="display:flex"> [
							{{if $.Entry.HasThumbnail}}
							<img src="/thumbnail{{$.Entry.Path}}" width="128px" height="72px" style="border:1px solid #CCC"> []
							{{else}}
							<div style="width:128px;height:72px;border:1px solid #CCCCCC"> []
							{{end}}
							<form class="updateThumbnail" action="/api/{{if $.Entry.HasThumbnail}}set{{else}}add{{end}}-thumbnail" method="POST" enctype="multipart/form-data"> [
								<input name="path" type="hidden" value="{{$.Entry.Path}}"> []
								<input id="thumbnail" class="updateThumbnailInput" name="file" type="file" accept="image/jpeg, image/png" style="display:none" onchange="updateThumbnail(this)"> []
								<label for="thumbnail" class="updateThumbnailButton thumbnailButton" style="{{if $.Entry.HasThumbnail}}visibility:hidden;{{end}}position:relative;top:0;margin-left:-1rem;box-sizing:border-box;width:1rem;height:1rem;border-radius:0 0 0 3px;display:flex;justify-content:center;align-items:center;font-size:0.75rem;cursor:pointer"> [+]
								<input readonly name="back_to_referer" type="hidden" value="1"> []
							]
							<form class="deleteThumbnail" action="/api/delete-thumbnail" method="POST"> [
								<input name="path" type="hidden" value="{{$.Entry.Path}}"> []
								<button id="delete-thumb" style="display:none"> []
								<label for="delete-thumb" class="deleteThumbnailButton thumbnailButton" style="{{if not $.Entry.HasThumbnail}}visibility:hidden;{{end}}position:relative;top:0;margin-left:-1rem;box-sizing:border-box;width:1rem;height:1rem;border-radius:0 0 0 3px;display:flex;justify-content:center;align-items:center;font-size:0.75rem;cursor:pointer;color:#888"> [-]
								<input readonly name="back_to_referer" type="hidden" value="1"> []
							]
						]
					]
					<div style="flex:3;font-size:2rem"> [
						<b> [{{pathLinks $.Entry.Path}}]
					]
					<!-- Search Box -->
					{{if ne $.Entry.Path "/"}}
					<form style="display:flex;flex:1"> [
						<select name="search_entry_type" class="search-box-left"> [
						{{range $t := $.AllEntryTypes}}
							<option value="{{$t}}" {{if eq $t $.UserSetting.EntryPageSearchEntryType}}selected{{end}}> [{{$t}}]
						{{end}}
						]
						<input name="search_query" type="text" class="search-box-center" style="flex:1;min-width:10rem" placeholder="search" value="{{$.SearchQuery}}"> []
						<button class="search-box-right" style="background-color:inherit"> [Go]
					]
					{{end}}
				]
				<div id="entry-items"> [
					<div style="display:flex;gap:1.2rem;margin-bottom:1.5rem;font-size:0.75rem;color:#555"> [
						<div id="property-box" class="item-box" style="display:flex"> [
							<div id="property-category" class="item-category" onclick="showItems('property')"> [Property ({{len $.Properties}})]
							<div class="item-adder" onclick="showItemAdder('{{$.Entry.Path}}', 'property')"> [+]
						]
						<div id="environ-box" class="item-box" style="display:flex"> [
							<div id="environ-category" class="item-category" onclick="showItems('environ')"> [Environ ({{len $.Environs}})]
							<div class="item-adder" onclick="showItemAdder('{{$.Entry.Path}}', 'environ')"> [+]
						]
						<div id="access-box" class="item-box" style="display:flex"> [
							<div id="access-category" class="item-category" onclick="showItems('access')"> [Access ({{len $.AccessControls}})]
							<div class="item-adder" onclick="showItemAdder('{{$.Entry.Path}}', 'access')"> [+]
						]
						<div style="flex:1"> []
						<form action="/api/delete-entry" method="post"> [
							<input name="path" type="hidden" value="{{$.Entry.Path}}"> []
							<button id="delete-entry-button" style="display:none"> []
							<label for="delete-entry-button" class="item-box" style="color:#A22;cursor:pointer"> [Delete]
							<input readonly name="back_to_referer" type="hidden" value="1"> []
						]
					]
					<div style="display:flex;gap:1rem;flex-wrap:wrap"> [
						{{range $p := $.Properties}}
						<div class="property-items" style="display:none"> [
							<div style="font-size:0.75rem;color:#AAA;cursor:pointer" onclick="showItemUpdater('{{$.Entry.Path}}', 'property', '{{$p.Name}}', '{{$p.Type}}', '{{$p.Value}}')"> [{{$p.Name}}]
							<div style="height:0.2rem"> []
							<div style="font-size:0.8rem"> [{{divEachLine $p.Eval}}]
						]
						{{end}}
						{{range $e := $.Environs}}
						<div class="environ-items" style="display:none"> [
							<div style="font-size:0.75rem;color:#AAA;cursor:pointer" onclick="showItemUpdater('{{$.Entry.Path}}', 'environ', '{{$e.Name}}', '{{$e.Type}}', '{{$e.Value}}')"> [{{$e.Name}}]
							<div style="height:0.2rem"> []
							<div style="font-size:0.8rem;overflow-wrap:break-word"> [{{divEachLine $e.Eval}}]
						]
						{{end}}
						{{range $a := $.AccessControls}}
						<div class="access-items" style="display:none"> [
							<div style="font-size:0.75rem;color:#AAA;cursor:pointer" onclick="showItemUpdater('{{$.Entry.Path}}', 'access', '{{$a.Accessor}}', '{{$a.AccessorType}}', '{{$a.Mode}}')"> [{{$a.Accessor}}]
							<div style="height:0.2rem"> []
							<div style="font-size:0.8rem;overflow-wrap:break-word"> [{{$a.Mode}}]
						]
						{{end}}
					]
				]
			]
			<div class="subEntries" style="flex:1;background-color:#FAFAFA;padding:1.5rem"> [
			{{if $.ResultsFromSearch}}
				{{if not $.SubEntriesByTypeByParent}}No search results{{end}}
			{{end}}
			{{$i := 0}}
			{{range $t, $entsByParent := $.SubEntriesByTypeByParent}}
				<div> [
					{{if $i}}
					<div style="margin-top:3rem;margin-bottom:3rem;border-top:1px solid #DDD"> []
					{{end}}
					{{if not $.ResultsFromSearch}}
					<div style="display:flex;align-items:center;flex-wrap:wrap;gap:2rem;margin-top:1rem;margin-bottom:1rem;"> [
						<div style="font-size:1.2rem"> [<b> [{{$t}}]]
						<!-- Add SubEntry -->
						<form action="/api/add-entry" style="display:flex" method="POST"> [
							<input name="parent" type="hidden" value="{{$.Entry.Path}}"> []
							<input name="type" type="hidden" value="{{$t}}"> []
							<input name="name" style="border:1px solid #DDD;border-right:0;border-radius:2px 0 0 2px" placeholder="name"> []
							<button style="border:1px solid #DDD;border-radius:0 2px 2px 0"> [+]
							<input readonly name="back_to_referer" type="hidden" value="1"> []
						]
						<!-- Property Filter -->
						<form action="/api/set-user-setting" style="flex:1;display:flex" method="POST"> [
							<input name="entry_page_entry_type" type="hidden" value="{{$t}}"> []
							<input name="entry_page_property_filter" type="text" style="flex:1;border:1px solid #DDD;border-radius:2px;width:20rem" value="{{index $.UserSetting.EntryPagePropertyFilter $t}}" placeholder="filter"> []
							<button style="display:none" name="update_filter" value="1"> []
							<input readonly name="back_to_referer" type="hidden" value="1"> []
						]
						<!-- Sort -->
						<form action="/api/set-user-setting" style="display:flex;align-items:center" method="POST"> [
							<input name="entry_page_entry_type" type="hidden" value="{{$t}}"> []
							{{$sortProp := index $.UserSetting.EntryPageSortProperty $t}}
							{{$prop := sortProperty $sortProp}}
							{{$desc := sortDesc $sortProp}}
							<select name="entry_page_sort_property" style="appearance:none;margin-right:0.5rem;min-width:6rem;border:1px solid #DDD;border-radius:2px;"> [
								<option value=""> [(name)]
							{{range $p := index $.DefaultProperties $t}}
								<option value="{{$p}}" {{if eq $p $prop}}selected{{end}}> [{{$p}}]
							{{end}}
							]
							<input id="sort_desc_cb" name="entry_page_sort_desc" style="margin:0;width:1.2rem;border-radius:2px 0 0 2px;background-color:#F3F3F3;height:20px" type="checkbox" {{if $desc}}checked{{end}}> []
							<button name="update_sort" style="appearance:none;border:1px solid #DDD;border-left:0;border-radius:0 2px 2px 0;background-color:#F3F3F3" value="1"> [Sort]
							<input readonly name="back_to_referer" type="hidden" value="1"> []
						]
					]
					{{end}}
					{{$j := 0}}
					{{range $parent, $entries := $entsByParent}}
						{{if $entries}}
							{{if $j}}
							<div style="height:1rem"> []
							{{end}}
							{{if $.ResultsFromSearch}}
								<h5> [From <a href="{{$parent}}"> [{{$parent}}]]
							{{end}}
							<div style="display:flex;flex-direction:column;border:1px solid #DDD;border-radius:4px"> [
								{{$propFilters := index $.PropertyFilters $t}}
								{{range $k, $e := $entries}}
								{{$props := index $.SubEntryProperties $e.Path}}
								{{$pad := "0.3rem"}}
								{{if $k}}
								<div style="border-top:1px solid #DDD"> []
								{{end}}
								<div class="subEntry" style="flex:1;display:flex;color:black"> [
									<div class="subEntryLink" style="padding:{{$pad}};width:96px"> [
										<a class="entryThumbnail" data-has-thumb="{{if $e.HasThumbnail}}1{{end}}" style="display:flex;color:black;text-decoration:none" href="{{$e.Path}}"> [
											{{if $e.HasThumbnail}}
											<img src="/thumbnail{{$e.Path}}" width="96px" height="54px" alt="" style="border:1px solid #CCCCCC;vertical-align:middle;background-color:#F4F4F4"> []
											{{else}}
											<div style="width:96px;height:54px;border:1px solid #CCCCCC;background-color:#F4F4F4"> []
											{{end}}
											<form class="updateThumbnail" action="/api/{{if $e.HasThumbnail}}set{{else}}add{{end}}-thumbnail" method="POST" enctype="multipart/form-data"> [
												<input name="path" type="hidden" value="{{$e.Path}}"> []
												<input id="thumbnail-{{$k}}" class="updateThumbnailInput" name="file" type="file" accept="image/jpeg, image/png" style="display:none" onchange="updateThumbnail(this)"> []
												<label for="thumbnail-{{$k}}" class="updateThumbnailButton thumbnailButton" style="{{if $e.HasThumbnail}}visibility:hidden;{{end}}position:relative;top:0;margin-left:-1rem;box-sizing:border-box;width:1rem;height:1rem;border-radius:0 0 0 3px;display:flex;justify-content:center;align-items:center;font-size:0.75rem;cursor:pointer;;color:#888"> [+]
												<input readonly name="back_to_referer" type="hidden" value="1"> []
											]
											<form class="deleteThumbnail" action="/api/delete-thumbnail" method="POST"> [
												<input name="path" type="hidden" value="{{$e.Path}}"> []
												<button id="delete-thumb-{{$k}}" style="display:none"> []
												<label for="delete-thumb-{{$k}}" class="deleteThumbnailButton thumbnailButton" style="{{if not $e.HasThumbnail}}visibility:hidden;{{end}}position:relative;top:0;margin-left:-1rem;box-sizing:border-box;width:1rem;height:1rem;border-radius:0 0 0 3px;display:flex;justify-content:center;align-items:center;font-size:0.75rem;cursor:pointer;color:#888"> [-]
												<input readonly name="back_to_referer" type="hidden" value="1"> []
											]
										]
										<a style="color:black" href="{{$e.Path}}"> [
											<div class="subEntryName" style="margin-top:{{$pad}};width:96px"> [<b> [{{$e.Name}}]]
										]
									]
									<div style="flex:1;padding:{{$pad}};display:flex;flex-wrap:wrap;gap:0.5rem;"> [
										{{range $name := $propFilters}}
											<div style="width:12rem;"> [
												{{$p := index $props $name}}
												<div style="font-size:0.75rem;color:#AAA;cursor:pointer" {{if $p}}onclick="showItemUpdater('{{$e.Path}}', 'property', '{{$p.Name}}', '{{$p.Type}}', '{{$p.Value}}')"{{end}}> [{{$name}}]
												{{if $p}}
												<div style="height:0.2rem"> []
												<div style="font-size:0.8rem;overflow-wrap:break-word"> [{{divEachLine $p.Eval}}]
												{{end}}
											]
										{{end}}
									]
								]
								{{end}}
							]
						{{$j = inc $j}}
						{{end}}
					{{end}}
				]
			{{$i = inc $i}}
			{{end}}
			]
			<div id="itemUpdater" data-initialized="0" style="display:none;position:fixed;left:0;bottom:0;width:100%;box-sizing:border-box;background-color:#F9F9F9;border-top:1px solid #BBB"> [
				<div style="display:flex;justify-content:space-between;padding:0.5rem;background-color:#E0EEEE"> [
					<div class="entryLabel" style=""> []
					<div style="border-radius:3px;background-color:#BDD;width:1rem;height:1rem;display:flex;justify-content:center;align-items:center;font-size:0.5rem;cursor:pointer" onclick="hideItemUpdater()"> [&#x2715]
				]
				<div style="display:flex;gap:0.5rem;margin:0.5rem;padding:0.2rem;"> [
					<div class="nameLabel" style="width:8rem;border:0;display:flex"> []
					<form class="valueForm" action="/api/set-property" style="flex:1;display:flex;gap:0.5rem;margin-bottom:1rem" method="POST"> [
						<input name="path" class="entryInput" type="hidden"> []
						<input name="name" class="nameInput" type="hidden"> []
						<input name="type" class="typeInput typeHolder" type="hidden"> []
						<textarea name="value" class="valueInput updaterOrAdderInput" style="flex:1"> []
						<input readonly name="back_to_referer" type="hidden" value="1"> []
						<button> [Update]
					]
				]
			]
			<div id="itemAdder" data-initialized="0" style="display:none;position:fixed;left:0;bottom:0;width:100%;box-sizing:border-box;background-color:#F9F9F9;border-top:1px solid #BBB"> [
				<div style="display:flex;justify-content:space-between;padding:0.5rem;background-color:#F5E0E0"> [
					<div class="entryLabel" style=""> []
					<div style="border-radius:3px;background-color:#ECC;width:1rem;height:1rem;display:flex;justify-content:center;align-items:center;font-size:0.5rem;cursor:pointer" onclick="hideItemAdder()"> [&#x2715]
				]
				<div style="display:flex;gap:0.5rem;margin:0.5rem;padding:0.2rem;"> [
					<form class="valueForm" action="/api/add-property" style="flex:1;display:flex;gap:0.5rem;margin-bottom:1rem" method="POST"> [
						<input name="path" class="entryInput" type="hidden"> []
						<input name="name" class="nameInput" style="box-sizing:border-box;height:1.5rem"> []
						<select name="type" class="typeSelect typeHolder" style="box-sizing:border-box;height:1.5rem;width:8rem"> [/* options will be added from script when event occurs */]
						<textarea name="value" class="valueInput updaterOrAdderInput"> []
						<input readonly name="back_to_referer" type="hidden" value="1"> []
						<button style="box-sizing:border-box;height:1.5rem"> [Add]
					]
				]
			]
		]
	]
]

<style> [`
.thumbnailButton {
	opacity: 0;
}

.thumbnailButton:hover {
	opacity: 0.8;
	background-color: #DDD;
}

.entryThumbnail.prepareDrop .thumbnailButton {
	opacity: 0.8;
	background-color: #DDD;
}

.subEntryName {
	text-decoration: none;
}

.subEntryLink:hover .subEntryName {
	text-decoration: underline;
}

.item-category {
	padding: 0.3rem;
	border-radius: 2px 0 0 2px;
	cursor: pointer;
}

.item-box:hover .item-category {
	background-color: #EEE;
}

.item-box.selected .item-category {
	background-color:#E0EEEE;
}

.item-adder {
	padding: 0.3rem;
	border-radius: 0 2px 2px 0;
	color: #999;
	cursor: pointer;
}

.item-box:hover .item-adder {
	background-color: #EEE;
}

.item-box.selected .item-adder {
	background-color:#E0EEEE;

}

.item-adder:hover {
	color: #555;
}

.property-items, .environ-items, .access-items {
	width: 12rem;
	height: 4rem;
	padding: 0.3rem;
	padding-right: 0.5rem;
	padding-bottom: 0.5rem;
	background-color: #FFF;
	border-radius: 2px;
	border: 1px solid #EEE;
	overflow: auto;
}
`]

<script> [`
window.onload = function() {
	let inputs = document.getElementsByClassName("updaterOrAdderInput");
	for (input of inputs) {
		input.onkeydown = function(ev) {
			if (!ev.ctrlKey && ev.code == "Enter") {
				let typeHolder = this.parentElement.getElementsByClassName("typeHolder")[0];
				if (typeHolder.value != "text") {
					ev.stopPropagation();
					ev.preventDefault();
				}
			}
			if (ev.ctrlKey && ev.code == "Enter") {
				ev.stopPropagation();
				ev.preventDefault();
				this.parentElement.submit();
			}
		}
	}
	let thumbs = document.getElementsByClassName('entryThumbnail');
	for (thumb of thumbs) {
		thumb.ondragover = function(event) {
			event.stopPropagation();
			event.preventDefault();
			event.currentTarget.classList.add("prepareDrop");
			if (event.currentTarget.dataset.hasThumb == "1") {
				event.currentTarget.getElementsByClassName("deleteThumbnailButton")[0].style.visibility = "hidden";
				event.currentTarget.getElementsByClassName("updateThumbnailButton")[0].style.visibility = "visible";
			}
		}
		thumb.ondragleave = function(event) {
			event.stopPropagation();
			event.preventDefault();
			event.currentTarget.classList.remove("prepareDrop");
			if (event.currentTarget.dataset.hasThumb == "1") {
				event.currentTarget.getElementsByClassName("updateThumbnailButton")[0].style.visibility = "hidden";
				event.currentTarget.getElementsByClassName("deleteThumbnailButton")[0].style.visibility = "visible";
			}
		}
		thumb.ondrop = function(event) {
			event.stopPropagation();
			event.preventDefault();
			let thumbInput = event.currentTarget.getElementsByClassName("updateThumbnailInput")[0];
			thumbInput.files = event.dataTransfer.files;
			updateThumbnail(thumbInput);
		}
	}
}

function updateThumbnail(thumbInput) {
	let thumbForm = thumbInput.parentElement;
	thumbForm.submit();
}

let LastItemAdderOrUpdater;

document.onkeydown = keyPressed;

function keyPressed(ev) {
	if (ev.code == "Escape") {
		toggleItemAdderOrUpdater();
	}
}

function hideAllItems() {
	let items = document.getElementById("entry-items");
	document.getElementById("property-box").classList.remove("selected");
	let props = items.getElementsByClassName("property-items");
	for (let p of props) {
		p.style.display = "none";
	}
	document.getElementById("environ-box").classList.remove("selected");
	let envs = items.getElementsByClassName("environ-items");
	for (let e of envs) {
		e.style.display = "none";
	}
	document.getElementById("access-box").classList.remove("selected");
	let accesses = items.getElementsByClassName("access-items");
	for (let a of accesses) {
		a.style.display = "none";
	}
}

function showItems(ctg) {
	let cls = document.getElementById(ctg + "-box").classList;
	let selected = cls.contains("selected")
	hideAllItems();
	if (selected) {
		return;
	}
	cls.add("selected");
	let items = document.getElementById("entry-items");
	let props = items.getElementsByClassName(ctg + "-items");
	for (let p of props) {
		p.style.display = "block";
	}
}

function showItemUpdater(entry, ctg, name, type, value) {
	hideItemAdder();
	let updater = document.getElementById("itemUpdater");
	LastItemAdderOrUpdater = updater;
	updater.dataset.initialized = "1";
	updater.style.display = "block";
	updater.getElementsByClassName("entryLabel")[0].innerText = entry;
	updater.getElementsByClassName("entryInput")[0].value = entry;
	updater.getElementsByClassName("nameLabel")[0].innerText = name;
	updater.getElementsByClassName("nameInput")[0].value = name;
	updater.getElementsByClassName("typeInput")[0].value = type;
	updater.getElementsByClassName("valueForm")[0].action = "/api/set-" + ctg
	let valueInput = updater.getElementsByClassName("valueInput")[0];
	valueInput.placeholder = type;
	valueInput.value = value;
	valueInput.focus();
}

function hideItemUpdater() {
	let updater = document.getElementById("itemUpdater");
	updater.style.display = "none";
}

let PropertyTypes = {{marshalJS $.PropertyTypes}}
let AccessorTypes = {{marshalJS $.AccessorTypes}}

function showItemAdder(entry, ctg) {
	hideItemUpdater();
	let adder = document.getElementById("itemAdder");
	LastItemAdderOrUpdater = adder;
	adder.dataset.initialized = "1";
	adder.style.display = "block";
	adder.getElementsByClassName("entryLabel")[0].innerText = entry;
	adder.getElementsByClassName("entryInput")[0].value = entry;
	let nameInput = adder.getElementsByClassName("nameInput")[0]
	nameInput.value = name;
	nameInput.placeholder = ctg;
	let typeSel = adder.getElementsByClassName("typeSelect")[0]
	typeSel.innerHTML = "";
	let types = PropertyTypes;
	if (ctg == "access") {
		types = AccessorTypes;
	}
	for (let t of types) {
		let option = document.createElement("option");
		option.value = t;
		option.text = t;
		typeSel.appendChild(option)
	}
	adder.getElementsByClassName("valueForm")[0].action = "/api/add-" + ctg;
	nameInput.focus();
}

function hideItemAdder() {
	let adder = document.getElementById("itemAdder");
	adder.style.display = "none";
}

function toggleItemAdderOrUpdater() {
	if (LastItemAdderOrUpdater == null) {
		return;
	}
	if (LastItemAdderOrUpdater.style.display == "block") {
		LastItemAdderOrUpdater.style.display = "none";
	} else {
		if (LastItemAdderOrUpdater.dataset.initialized == "1") {
			LastItemAdderOrUpdater.style.display = "block";
		}
	}
}

function toggleCollapse() {
	let collapsible = this.parentElement;
	let content = collapsible.getElementsByClassName("content")[0];
	if (content.style.display == "none") {
		content.style.display = "block";
	} else {
		content.style.display = "none";
	}
}

var coll = document.getElementsByClassName("collapsible");
for (i = 0; i < coll.length; i++) {
	coll[i].getElementsByClassName("title")[0].addEventListener("click", toggleCollapse);
}
`]
